buildscript {
    dependencies {
        classpath 'com.google.guava:guava:28.2-jre'// workaround for failing spotbugs
    }
}

plugins {
    id 'nebula.project' version '7.0.7'
    id 'nebula.info' version '6.0.0'
    id 'nebula.optional-base' version '5.0.3'
    id 'nebula.release' version '14.0.4'
    id 'nebula.lint' version '16.0.2'

    id 'nebula.maven-publish' version '16.0.0' apply false
    id 'nebula.maven-apache-license' version '16.0.0' apply false
    id 'nebula.source-jar' version '16.0.0' apply false

    id 'org.springframework.boot' version '2.2.4.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.9.RELEASE' apply false
    id 'io.spring.propdeps' version '0.0.10.RELEASE' apply false

    id 'com.github.spotbugs' version '3.0.0' apply false

    id 'com.github.ben-manes.versions' version '0.27.0'
    id 'com.dorongold.task-tree' version '1.5'
}

ext {
    evcacheVersion = '5.12.23'
    spectatorVersion = '0.99.2'
}

allprojects {
    apply plugin: 'nebula.release'
    apply plugin: 'nebula.info'
    apply plugin: 'nebula.project'
    apply plugin: 'nebula.optional-base'
    apply plugin: 'nebula.lint'

    group 'com.github.aafwu00'

    contacts {
        'aafwu00@gmail.com' {
            moniker 'Taeho Kim'
            role 'Developer'
        }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = sourceCompatibility

    test {
        useJUnitPlatform()
        reports {
            html.enabled = true
        }
    }

    if (!project.name.contains('sample')) {
        apply plugin: 'checkstyle'
        apply plugin: 'pmd'
        apply plugin: 'jacoco'
        apply plugin: 'com.github.spotbugs'

        apply plugin: 'maven-publish'
        apply plugin: 'nebula.maven-publish'
        apply plugin: 'nebula.source-jar'
        apply plugin: 'nebula.maven-apache-license'

        apply plugin: 'com.dorongold.task-tree'
        apply plugin: 'com.github.ben-manes.versions'

        checkstyle {
            toolVersion = '8.29'
            sourceSets = [project.sourceSets.main as SourceSet]
            configFile = rootProject.file('config/checkstyle/google_checks.xml')
            configProperties = ['checkstyle.regexp.header.file': "${rootProject.projectDir}/config/checkstyle/java_regexp.header"]
            maxErrors = 0
            maxWarnings = 0
        }

        pmd {
            toolVersion = '6.21.0'
            sourceSets = [project.sourceSets.main as SourceSet]
            ruleSets = []
            ruleSetFiles = rootProject.files('config/pmd/rulesets.xml')
            rulePriority = 3
        }

        configurations {
            spotbugsStylesheets { transitive = false }
        }
        spotbugs {
            toolVersion = '4.0.0'
            effort = 'max'
            reportLevel = 'high'
            spotbugsTest.enabled = false
        }
        tasks.withType(com.github.spotbugs.SpotBugsTask) {
            reports {
                xml.enabled = false
                html.enabled = true
                html.stylesheet = resources.text.fromArchiveEntry(configurations.spotbugsStylesheets, "color.xsl")
            }
        }

        jacoco {
            toolVersion = '0.8.5'
        }

        jacocoTestCoverageVerification {
            violationRules {
                rule {                    
                    limit {
                        minimum = 0.70
                    }
                }
            }
        }

        jacocoTestReport {
            reports {
                html.enabled = true
                xml.enabled = true
                csv.enabled = false
            }
            finalizedBy 'jacocoTestCoverageVerification'
        }

        check {
            finalizedBy 'jacocoTestReport'
        }
    }

    if (project.name.endsWith('sample')) {
        apply plugin: 'org.springframework.boot'
    }

    if (project.name.contains('autoconfigure')) {
        apply plugin: 'propdeps'
        apply plugin: 'propdeps-maven'
        apply plugin: 'propdeps-idea'
        apply plugin: 'propdeps-eclipse'

        compileJava.dependsOn(processResources)
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    configurations {
        all.collect { configuration ->
            configuration.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }
    }

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR1'
        }
    }

    dependencies {
        if (!project.name.contains('sample')) {
            // for spotbugs
            spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.1'

            compileOnly "com.github.spotbugs:spotbugs:${spotbugs.toolVersion}"
            compileOnly 'net.jcip:jcip-annotations:1.0'
            compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion}"
            testImplementation 'com.google.code.findbugs:jsr305:3.0.2'
            spotbugsStylesheets "com.github.spotbugs:spotbugs:${spotbugs.toolVersion}"
        }
        if (project.name.endsWith('starter')) {
            testImplementation 'org.testcontainers:junit-jupiter:1.12.5'
        }
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'org.junit.jupiter:junit-jupiter-api'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        if (project.name.contains('autoconfigure')) {
            annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        }
    }
}
